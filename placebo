#!/usr/bin/env bash

# shellcheck disable=SC1090,SC2015,SC2166

usage() {
  case $1 in
  "main")
    echo "Usage: . $0 [-h]"
    ;;
  "attach")
    echo "Usage: pill_attach \
command=aws data_path=path/to/responses"
    ;;
  esac
  return 1
}
[ "$1" == "-h" ] && usage main
[[ "$0" == "${BASH_SOURCE[0]}" ]] && usage main

pill_attach() {

  # $1 is a placeholder. It is here to provide
  # consistency with Python Placebo, and also
  # allows possible expansion to work with
  # other tools aside from AWS CLI.
  #
  [ "$1" == "command=aws" ] || usage attach

  echo "$2" | grep -q = || usage attach
  DATA_PATH=$(echo "$2" | cut -f2 -d=)

  true > commands_log
}

pill_playback() {
  PILL=playback
}

pill_record() {
  PILL=record
}

pill_log() {
  [ -f commands_log ] && cat commands_log
}

pill_detach() {
  local f funcs
  funcs="usage
pill_attach
pill_playback
pill_record
pill_log
pill_detach
create_new
update_existing
filter
record
aws"
  for f in $funcs ; do
    unset -f "$f"
  done
  unset PILL
  unset DATA_PATH
  rm -f commands_log
}

create_new() {
  local f=$1
  mkdir -p "$(dirname "$f")"
  echo 'case "aws $*" in' > "$f"
}

update_existing() {
  local f=$1
  awk '/^\*\)/{exit}{print}' "$f" > "$f.bak"
  mv "$f.bak" "$f"
}

filter() {
  sed -e 's/  *$//' \
      -e "s/  *'/'/"
}

record() {
  local f com sub
  read -r f com sub <<< "$1 $2 $3"
  shift ; shift ; shift

  [ -s "$f" ] && update_existing "$f" \
    || create_new "$f"

  # open another case.
  cat <<EOD | filter >> "$f"
'aws $com $sub $@')
  cat <<'EOF'
EOD

  # insert response data.
  command aws "$com" "$sub" "$@" | tee -a "$f"

  # close the case and the block.
  cat >> "$f" <<EOD
EOF
  ;;
*)
  echo "No responses for: aws \$*"
  ;;
esac
EOD
}

aws() {
  local com sub
  read -r com sub <<< "$1 $2"
  shift ; shift

  if [ -z "$DATA_PATH" ] ; then
    echo "DATA_PATH must be set. \
Try pill_attach"
    return 1
  fi

  if [ -z "$PILL" ] ; then
    echo "PILL must be set to playback or record. \
Try pill_playback or pill_record"
    return 1
  fi

  if [ ! -f "$DATA_PATH" -a "$PILL" == "playback" ] ; then
    echo "DATA_PATH not found. \
Try pill_record to record one"
    return 1
  fi

  echo "aws $com $sub $*" | filter >> commands_log

  case "$PILL" in
  "playback")
    source "$DATA_PATH" "$com" "$sub" "$@"
    ;;
  "record")
    record "$DATA_PATH" "$com" "$sub" "$@"
    ;;
  esac
}

# vim: ft=sh
